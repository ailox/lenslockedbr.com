package models

import (
	"github.com/jinzhu/gorm"
)

const (
	ErrUserIDRequired modelError = "models: user ID is required"
	ErrTitleRequired modelError = "models: title is required"
)

var _ GalleryDB = &galleryGorm{}

type Gallery struct {
	gorm.Model
	
	UserID uint `gorm:not_null;index`
	Title string `gorm:not_null`
}

// GalleryDB is used to interact with the galleries database.
// 
// For pretty much all single gallery queries:
// If the gallery is found, we will return a nil error
// If the gallery is not found, we will return ErrNotFound
// If there is another error, we will return an error with more
// information about what went wrong. This may not be an error
// generated by the models package.
type GalleryDB interface {
	Create(gallery *Gallery) error
	Update(gallery *Gallery) error
	Delete(id uint) error

	ByID(id uint) (*Gallery, error)
	ByUserID(userID uint) ([]Gallery, error)
}

type GalleryService interface {
	GalleryDB
}

type galleryService struct {
	GalleryDB
}

func NewGalleryService(db *gorm.DB) GalleryService {
	return &galleryService {
		GalleryDB: &galleryValidator {
			GalleryDB: &galleryGorm {
				db: db,
			},
		},
	}
}

//
// Gorm
//

type galleryGorm struct {
	db *gorm.DB
}

func (g *galleryGorm) Create(gallery *Gallery) error {
	return g.db.Create(gallery).Error
}

func (g *galleryGorm) Update(gallery *Gallery) error {
	return g.db.Save(gallery).Error
}

func (g *galleryGorm) Delete(id uint) error {
	gallery := Gallery { Model: gorm.Model { ID: id } }

	return g.db.Delete(&gallery).Error
}

func (g *galleryGorm) ByID(id uint) (*Gallery, error) {
	var gallery Gallery
	db := g.db.Where("id = ?", id)
	err := first(db, &gallery)
	if err != nil {
		return nil, err
	}

	return &gallery, nil
}

func (g *galleryGorm) ByUserID(userID uint) ([]Gallery, error) {

	var galleries []Gallery

	db := g.db.Where("user_id = ?", userID)
	
	if err := db.Find(&galleries).Error ; err != nil {
		return nil, err
	}

	return galleries, nil
}

//
// Validators
//

type galleryValidator struct {
	GalleryDB
}

func (gv *galleryValidator) userIDRequired(g *Gallery) error {
	if g.UserID <= 0 {	
		return ErrUserIDRequired
	}

	return nil
}

func (gv *galleryValidator) titleRequired(g *Gallery) error {
	if g.Title == "" {
		return ErrTitleRequired
	}	

	return nil
}

func (gv *galleryValidator) nonZeroID(gallery *Gallery) error {
	if gallery.ID <= 0 {
		return ErrIDInvalid
	}

	return nil
}

func (gv *galleryValidator) Create(gallery *Gallery) error {

	err := runGalleryValFns(gallery,
		gv.userIDRequired,
		gv.titleRequired)

	if err != nil {
		return err
	}

	return gv.GalleryDB.Create(gallery)
}

func (gv *galleryValidator) Update(gallery *Gallery) error {
	
	err := runGalleryValFns(gallery,
			gv.userIDRequired,
			gv.titleRequired)

	if err != nil {
		return err
	}

	return gv.GalleryDB.Update(gallery)
}

func (gv *galleryValidator) Delete(id uint) error {

	var gallery Gallery
	gallery.ID = id

	err := runGalleryValFns(&gallery,
			gv.nonZeroID)
	if err != nil {
		return err
	}

	return gv.GalleryDB.Delete(gallery.ID)
}

type galleryValFn func(*Gallery) error

func runGalleryValFns(gallery *Gallery, fns ...galleryValFn) error {
	for _, fn := range fns {
		if err := fn(gallery); err != nil {
			return err
		}
	}

	return nil
}
